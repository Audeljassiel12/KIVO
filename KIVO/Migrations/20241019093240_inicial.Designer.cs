// <auto-generated />
using System;
using KIVO.Models.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace KIVO.Migrations
{
    [DbContext(typeof(KivoDbContext))]
    [Migration("20241019093240_inicial")]
    partial class inicial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("KIVO.Models.AntecedentesFamiliaresPatologicos", b =>
                {
                    b.Property<int>("AntecedentesFamiliaresPatologicosId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AntecedentesFamiliaresPatologicosId"));

                    b.Property<bool?>("Amebiasis")
                        .HasColumnType("bit");

                    b.Property<bool?>("Colera")
                        .HasColumnType("bit");

                    b.Property<string>("DetallesAmebiasis")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DetallesColera")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DetallesEscabiosis")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DetallesEscarlatina")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DetallesFiebreTifoidea")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DetallesHepatitis")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DetallesImpetigo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DetallesMalaria")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DetallesMeningitis")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DetallesOtros")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DetallesParotiditis")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DetallesPediculosis")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DetallesRubéola")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DetallesSarampion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DetallesSifilis")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DetallesTB")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DetallesTina")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DetallesTosferina")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DetallesVaricela")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Escabiosis")
                        .HasColumnType("bit");

                    b.Property<bool?>("Escarlatina")
                        .HasColumnType("bit");

                    b.Property<bool?>("FiebreTifoidea")
                        .HasColumnType("bit");

                    b.Property<bool?>("Hepatitis")
                        .HasColumnType("bit");

                    b.Property<bool?>("Impetigo")
                        .HasColumnType("bit");

                    b.Property<bool?>("Malaria")
                        .HasColumnType("bit");

                    b.Property<bool?>("Meningitis")
                        .HasColumnType("bit");

                    b.Property<bool?>("Otros")
                        .HasColumnType("bit");

                    b.Property<string>("PacienteId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool?>("Parotiditis")
                        .HasColumnType("bit");

                    b.Property<bool?>("Pediculosis")
                        .HasColumnType("bit");

                    b.Property<bool?>("Rubéola")
                        .HasColumnType("bit");

                    b.Property<bool?>("Sarampion")
                        .HasColumnType("bit");

                    b.Property<bool?>("Sifilis")
                        .HasColumnType("bit");

                    b.Property<bool?>("TB")
                        .HasColumnType("bit");

                    b.Property<bool?>("Tina")
                        .HasColumnType("bit");

                    b.Property<bool?>("Tosferina")
                        .HasColumnType("bit");

                    b.Property<bool?>("Varicela")
                        .HasColumnType("bit");

                    b.HasKey("AntecedentesFamiliaresPatologicosId");

                    b.HasIndex("PacienteId");

                    b.ToTable("AntecedentesFamiliaresPatologicos");
                });

            modelBuilder.Entity("KIVO.Models.CargoPorConsulta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CitaId")
                        .HasColumnType("int");

                    b.Property<decimal>("Descuento")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("TotalParcial")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CitaId");

                    b.ToTable("CargoPorConsultas");
                });

            modelBuilder.Entity("KIVO.Models.CentroMedico", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CuidadId")
                        .HasColumnType("int");

                    b.Property<int>("DepartamentoId")
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Direccion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FechaRegistro")
                        .HasColumnType("datetime2");

                    b.Property<string>("HorarioAtencion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LogoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SitioWeb")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telefono")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TipoCentroMedico")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CuidadId");

                    b.HasIndex("DepartamentoId");

                    b.ToTable("CentroMedicos");
                });

            modelBuilder.Entity("KIVO.Models.Cita", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CentroMedicoId")
                        .HasColumnType("int");

                    b.Property<int>("EstadoDeCita")
                        .HasColumnType("int");

                    b.Property<int?>("ExploracionTopograficaId")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaCita")
                        .HasColumnType("datetime2");

                    b.Property<string>("MedicoId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Motivo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NutricionId")
                        .HasColumnType("int");

                    b.Property<string>("PacienteId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("RecetaId")
                        .HasColumnType("int");

                    b.Property<int?>("ResultadoLaboratorioId")
                        .HasColumnType("int");

                    b.Property<int>("SignosVitalesId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CentroMedicoId");

                    b.HasIndex("MedicoId");

                    b.HasIndex("PacienteId");

                    b.ToTable("Citas");
                });

            modelBuilder.Entity("KIVO.Models.Cuidad", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DepartamentoId")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DepartamentoId");

                    b.ToTable("Ciudades");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DepartamentoId = 1,
                            Nombre = "Managua"
                        },
                        new
                        {
                            Id = 2,
                            DepartamentoId = 1,
                            Nombre = "Tipitapa"
                        },
                        new
                        {
                            Id = 3,
                            DepartamentoId = 1,
                            Nombre = "Ciudad Sandino"
                        },
                        new
                        {
                            Id = 4,
                            DepartamentoId = 2,
                            Nombre = "León"
                        },
                        new
                        {
                            Id = 5,
                            DepartamentoId = 2,
                            Nombre = "El Sauce"
                        },
                        new
                        {
                            Id = 6,
                            DepartamentoId = 2,
                            Nombre = "La Paz Centro"
                        },
                        new
                        {
                            Id = 7,
                            DepartamentoId = 3,
                            Nombre = "Granada"
                        },
                        new
                        {
                            Id = 8,
                            DepartamentoId = 3,
                            Nombre = "Nandaime"
                        },
                        new
                        {
                            Id = 9,
                            DepartamentoId = 4,
                            Nombre = "Masaya"
                        },
                        new
                        {
                            Id = 10,
                            DepartamentoId = 4,
                            Nombre = "Nindirí"
                        },
                        new
                        {
                            Id = 11,
                            DepartamentoId = 5,
                            Nombre = "Chinandega"
                        },
                        new
                        {
                            Id = 12,
                            DepartamentoId = 5,
                            Nombre = "Corinto"
                        },
                        new
                        {
                            Id = 13,
                            DepartamentoId = 6,
                            Nombre = "Matagalpa"
                        },
                        new
                        {
                            Id = 14,
                            DepartamentoId = 6,
                            Nombre = "Jinotega"
                        },
                        new
                        {
                            Id = 15,
                            DepartamentoId = 7,
                            Nombre = "Estelí"
                        },
                        new
                        {
                            Id = 16,
                            DepartamentoId = 7,
                            Nombre = "Condega"
                        },
                        new
                        {
                            Id = 17,
                            DepartamentoId = 8,
                            Nombre = "Rivas"
                        },
                        new
                        {
                            Id = 18,
                            DepartamentoId = 8,
                            Nombre = "San Juan del Sur"
                        },
                        new
                        {
                            Id = 19,
                            DepartamentoId = 9,
                            Nombre = "Jinotega"
                        },
                        new
                        {
                            Id = 20,
                            DepartamentoId = 9,
                            Nombre = "San Rafael del Norte"
                        },
                        new
                        {
                            Id = 21,
                            DepartamentoId = 10,
                            Nombre = "Diriamba"
                        },
                        new
                        {
                            Id = 22,
                            DepartamentoId = 10,
                            Nombre = "Jinotepe"
                        },
                        new
                        {
                            Id = 23,
                            DepartamentoId = 11,
                            Nombre = "Boaco"
                        },
                        new
                        {
                            Id = 24,
                            DepartamentoId = 11,
                            Nombre = "Camoapa"
                        },
                        new
                        {
                            Id = 25,
                            DepartamentoId = 12,
                            Nombre = "Juigalpa"
                        },
                        new
                        {
                            Id = 26,
                            DepartamentoId = 12,
                            Nombre = "Acoyapa"
                        },
                        new
                        {
                            Id = 27,
                            DepartamentoId = 13,
                            Nombre = "San Carlos"
                        },
                        new
                        {
                            Id = 28,
                            DepartamentoId = 13,
                            Nombre = "El Castillo"
                        },
                        new
                        {
                            Id = 29,
                            DepartamentoId = 14,
                            Nombre = "Ocotal"
                        },
                        new
                        {
                            Id = 30,
                            DepartamentoId = 14,
                            Nombre = "Jalapa"
                        },
                        new
                        {
                            Id = 31,
                            DepartamentoId = 15,
                            Nombre = "Bilwi"
                        },
                        new
                        {
                            Id = 32,
                            DepartamentoId = 15,
                            Nombre = "Waspam"
                        },
                        new
                        {
                            Id = 33,
                            DepartamentoId = 16,
                            Nombre = "Bluefields"
                        },
                        new
                        {
                            Id = 34,
                            DepartamentoId = 16,
                            Nombre = "Laguna de Perlas"
                        });
                });

            modelBuilder.Entity("KIVO.Models.Departamento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Departamentos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Nombre = "Managua"
                        },
                        new
                        {
                            Id = 2,
                            Nombre = "León"
                        },
                        new
                        {
                            Id = 3,
                            Nombre = "Granada"
                        },
                        new
                        {
                            Id = 4,
                            Nombre = "Masaya"
                        },
                        new
                        {
                            Id = 5,
                            Nombre = "Chinandega"
                        },
                        new
                        {
                            Id = 6,
                            Nombre = "Matagalpa"
                        },
                        new
                        {
                            Id = 7,
                            Nombre = "Estelí"
                        },
                        new
                        {
                            Id = 8,
                            Nombre = "Rivas"
                        },
                        new
                        {
                            Id = 9,
                            Nombre = "Jinotega"
                        },
                        new
                        {
                            Id = 10,
                            Nombre = "Carazo"
                        },
                        new
                        {
                            Id = 11,
                            Nombre = "Boaco"
                        },
                        new
                        {
                            Id = 12,
                            Nombre = "Chontales"
                        },
                        new
                        {
                            Id = 13,
                            Nombre = "Río San Juan"
                        },
                        new
                        {
                            Id = 14,
                            Nombre = "Nueva Segovia"
                        },
                        new
                        {
                            Id = 15,
                            Nombre = "RAAN"
                        },
                        new
                        {
                            Id = 16,
                            Nombre = "RAAS"
                        });
                });

            modelBuilder.Entity("KIVO.Models.Diagnostico", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CitaId")
                        .HasColumnType("int");

                    b.Property<string>("CodigoCIE10")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EsGlobal")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CitaId");

                    b.ToTable("Diagnosticos");
                });

            modelBuilder.Entity("KIVO.Models.Dieta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool?>("Almuerzo")
                        .HasColumnType("bit");

                    b.Property<bool?>("Cena")
                        .HasColumnType("bit");

                    b.Property<bool?>("Desayuno")
                        .HasColumnType("bit");

                    b.Property<string>("DetallesAlmuerzo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DetallesCena")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DetallesDesayuno")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DetallesDietasPasadas")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DetallesDolenciasPasadasRelacionadasConElPeso")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DetallesEducacionNutricional")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DetallesEnfermedadesActualesRelacionadasConElPeso")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DetallesEnfermedadesAlimentarias")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DetallesIngestaDeLiquidos")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DetallesMananaDeColacion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DetallesOtros")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DetallesPesoIdeal")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DetallesPreparadoEnCasa")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DetallesSaciedad")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DetallesSuplementos")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DetallesTardeDeColacion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("DietasPasadas")
                        .HasColumnType("bit");

                    b.Property<bool?>("DolenciasPasadasRelacionadasConElPeso")
                        .HasColumnType("bit");

                    b.Property<bool?>("EducacionNutricional")
                        .HasColumnType("bit");

                    b.Property<bool?>("EnfermedadesActualesRelacionadasConElPeso")
                        .HasColumnType("bit");

                    b.Property<bool?>("EnfermedadesAlimentarias")
                        .HasColumnType("bit");

                    b.Property<bool?>("IngestaDeLiquidos")
                        .HasColumnType("bit");

                    b.Property<bool?>("MananaDeColacion")
                        .HasColumnType("bit");

                    b.Property<int?>("NivelDeApetito")
                        .HasColumnType("int");

                    b.Property<string>("NumeroDeVasosDeAgua")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Otros")
                        .HasColumnType("bit");

                    b.Property<string>("PacienteId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PesoIdeal")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PreferenciasAlimentarias")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("PreparadoEnCasa")
                        .HasColumnType("bit");

                    b.Property<bool?>("Saciedad")
                        .HasColumnType("bit");

                    b.Property<bool?>("Suplementos")
                        .HasColumnType("bit");

                    b.Property<bool?>("TardeDeColacion")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("PacienteId");

                    b.ToTable("Dietas");
                });

            modelBuilder.Entity("KIVO.Models.EnfermedadesHereditarias", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool?>("Alergias")
                        .HasColumnType("bit");

                    b.Property<bool?>("AnomaliasCrecimientoDesarrollo")
                        .HasColumnType("bit");

                    b.Property<bool?>("DesordenesMentales")
                        .HasColumnType("bit");

                    b.Property<string>("DetallesAlergias")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DetallesAnomaliasCrecimientoDesarrollo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DetallesDesordenesMentales")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DetallesDiabetesMellitus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DetallesEnfermedadHepatica")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DetallesEnfermedadReumatica")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DetallesEnfermedadesCardiacas")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DetallesEnfermedadesDegenerativas")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DetallesEnfermedadesMusculares")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DetallesEnfermedadesOculares")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DetallesEnfermedadesRenales")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DetallesErroresMetabolismo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DetallesHipertensionArterial")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DetallesMalformacionesCongenitas")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DetallesOtros")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("DiabetesMellitus")
                        .HasColumnType("bit");

                    b.Property<bool?>("EnfermedadHepatica")
                        .HasColumnType("bit");

                    b.Property<bool?>("EnfermedadReumatica")
                        .HasColumnType("bit");

                    b.Property<bool?>("EnfermedadesCardiacas")
                        .HasColumnType("bit");

                    b.Property<bool?>("EnfermedadesDegenerativas")
                        .HasColumnType("bit");

                    b.Property<bool?>("EnfermedadesMusculares")
                        .HasColumnType("bit");

                    b.Property<bool?>("EnfermedadesOculares")
                        .HasColumnType("bit");

                    b.Property<bool?>("EnfermedadesRenales")
                        .HasColumnType("bit");

                    b.Property<bool?>("ErroresMetabolismo")
                        .HasColumnType("bit");

                    b.Property<bool?>("HipertensionArterial")
                        .HasColumnType("bit");

                    b.Property<bool?>("MalformacionesCongenitas")
                        .HasColumnType("bit");

                    b.Property<bool?>("Otros")
                        .HasColumnType("bit");

                    b.Property<string>("PacienteId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("PacienteId");

                    b.ToTable("EnfermedadesHereditarias");
                });

            modelBuilder.Entity("KIVO.Models.EspecialidadMedica", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("EspecialidadesMedicas");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Nombre = "Cardiología"
                        },
                        new
                        {
                            Id = 2,
                            Nombre = "Pediatría"
                        },
                        new
                        {
                            Id = 3,
                            Nombre = "Dermatología"
                        },
                        new
                        {
                            Id = 4,
                            Nombre = "Oftalmología"
                        },
                        new
                        {
                            Id = 5,
                            Nombre = "Neurología"
                        },
                        new
                        {
                            Id = 6,
                            Nombre = "Ginecología"
                        },
                        new
                        {
                            Id = 7,
                            Nombre = "Psiquiatría"
                        },
                        new
                        {
                            Id = 8,
                            Nombre = "Ortopedia"
                        },
                        new
                        {
                            Id = 9,
                            Nombre = "Neumología"
                        },
                        new
                        {
                            Id = 10,
                            Nombre = "Endocrinología"
                        },
                        new
                        {
                            Id = 11,
                            Nombre = "Gastroenterología"
                        },
                        new
                        {
                            Id = 12,
                            Nombre = "Oncología"
                        },
                        new
                        {
                            Id = 13,
                            Nombre = "Urología"
                        },
                        new
                        {
                            Id = 14,
                            Nombre = "Nefrología"
                        },
                        new
                        {
                            Id = 15,
                            Nombre = "Hematología"
                        },
                        new
                        {
                            Id = 16,
                            Nombre = "Infectología"
                        },
                        new
                        {
                            Id = 17,
                            Nombre = "Reumatología"
                        },
                        new
                        {
                            Id = 18,
                            Nombre = "Otorrinolaringología"
                        },
                        new
                        {
                            Id = 19,
                            Nombre = "Toxicología"
                        });
                });

            modelBuilder.Entity("KIVO.Models.ExploracionTopografica", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CitaId")
                        .HasColumnType("int");

                    b.Property<string>("Observaciones")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ParteDelCuerpo")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CitaId")
                        .IsUnique();

                    b.ToTable("ExploracionesTopograficas");
                });

            modelBuilder.Entity("KIVO.Models.HistoriaObstetricaGinecologica", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool?>("ActividadSexual")
                        .HasColumnType("bit");

                    b.Property<bool?>("CancerCuelloUterino")
                        .HasColumnType("bit");

                    b.Property<bool?>("CancerMama")
                        .HasColumnType("bit");

                    b.Property<bool?>("CancerUtero")
                        .HasColumnType("bit");

                    b.Property<string>("CaracteristicasMenstruacion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DetallesActividadSexual")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DetallesCancerCuelloUterino")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DetallesCancerMama")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DetallesCancerUtero")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DetallesEmbarazos")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DetallesOtro")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DetallesTerapiaReemplazoHormonal")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Embarazos")
                        .HasColumnType("bit");

                    b.Property<string>("MetodosControlNatalidad")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Otro")
                        .HasColumnType("bit");

                    b.Property<string>("PacienteId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("PrimeraCitaMenstruacion")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("TerapiaReemplazoHormonal")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UltimaFechaMenstruacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UltimaMastografia")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UltimaPruebaPapanicolaou")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PacienteId");

                    b.ToTable("HistoriasObstetricasGinecologicas");
                });

            modelBuilder.Entity("KIVO.Models.HistoriaPostnatal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool?>("AlimentacionInfantil")
                        .HasColumnType("bit");

                    b.Property<string>("DetallesEstadoEmocional")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DetallesRevisionNacimiento")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DetallesSaludBebe")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("EstadoEmocional")
                        .HasColumnType("bit");

                    b.Property<string>("NombreBebe")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PacienteId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal?>("PesoAlNacer")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool?>("RevisiónNacimiento")
                        .HasColumnType("bit");

                    b.Property<bool?>("SaludBebe")
                        .HasColumnType("bit");

                    b.Property<string>("TipoAlimentacion")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PacienteId");

                    b.ToTable("HistoriasPostnatales");
                });

            modelBuilder.Entity("KIVO.Models.HistoriaPsiquiatrica", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool?>("ApoyoFamiliaresAmigos")
                        .HasColumnType("bit");

                    b.Property<bool?>("ConcienciaEnfermedad")
                        .HasColumnType("bit");

                    b.Property<bool?>("ControlImpulsos")
                        .HasColumnType("bit");

                    b.Property<string>("DetallesApoyoFamiliaresAmigos")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DetallesConcienciaEnfermedad")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DetallesControlImpulsos")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DetallesLidiaConEstres")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DetallesRelacionConAutoridad")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DetallesVidaFamiliar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DetallesVidaLaboral")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DetallesVidaSocial")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("LidiaConEstres")
                        .HasColumnType("bit");

                    b.Property<string>("PacienteId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool?>("RelacionConAutoridad")
                        .HasColumnType("bit");

                    b.Property<bool?>("VidaFamiliar")
                        .HasColumnType("bit");

                    b.Property<bool?>("VidaLaboral")
                        .HasColumnType("bit");

                    b.Property<bool?>("VidaSocial")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("PacienteId");

                    b.ToTable("HistoriasPsiquiatricas");
                });

            modelBuilder.Entity("KIVO.Models.HorarioAtencion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CentroMedicoId")
                        .HasColumnType("int");

                    b.Property<int>("Dia")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("HoraApertura")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("HoraCierre")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex("CentroMedicoId");

                    b.ToTable("HorariosAtencion");
                });

            modelBuilder.Entity("KIVO.Models.InvitacionDoctor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Apellidos")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CentroMedicoId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Especialidad")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EstaAceptada")
                        .HasColumnType("bit");

                    b.Property<bool>("EstaExpirada")
                        .HasColumnType("bit");

                    b.Property<DateTime>("FechaInvitacion")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nombres")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CentroMedicoId");

                    b.ToTable("InvitacionesDoctors");
                });

            modelBuilder.Entity("KIVO.Models.Medicamento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Concentracion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Medicamentos");
                });

            modelBuilder.Entity("KIVO.Models.Medico", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Apellidos")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CentroMedicoId")
                        .HasColumnType("int");

                    b.Property<int?>("EspecialidadMedicoId")
                        .HasColumnType("int");

                    b.Property<string>("Nombres")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telefono")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CentroMedicoId");

                    b.HasIndex("EspecialidadMedicoId");

                    b.ToTable("Medicos");
                });

            modelBuilder.Entity("KIVO.Models.NotaDeEncuentro", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CitaId")
                        .HasColumnType("int");

                    b.Property<string>("Observaciones")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CitaId");

                    b.ToTable("NotasDeEncuentros");
                });

            modelBuilder.Entity("KIVO.Models.Nutricion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("Abdomen")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("Agua")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("Cintura")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("CitaId")
                        .HasColumnType("int");

                    b.Property<decimal?>("MasaMuscular")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("PerdidaPeso")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("PorcentajeGrasaCorporal")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CitaId")
                        .IsUnique();

                    b.ToTable("Nutriciones");
                });

            modelBuilder.Entity("KIVO.Models.Paciente", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Apellidos")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CentroMedicoId")
                        .HasColumnType("int");

                    b.Property<int?>("CiudadId")
                        .HasColumnType("int");

                    b.Property<int?>("DepartamentoId")
                        .HasColumnType("int");

                    b.Property<string>("Dirección")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EstadoCivil")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FechaNacimiento")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaRegistro")
                        .HasColumnType("datetime2");

                    b.Property<string>("FotoPerfilUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Genero")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombres")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ocupación")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Teléfono")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TipoSangre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CentroMedicoId");

                    b.HasIndex("CiudadId");

                    b.HasIndex("DepartamentoId");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("Pacientes");
                });

            modelBuilder.Entity("KIVO.Models.PlanSuscripcion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DuracionEnDias")
                        .HasColumnType("int");

                    b.Property<bool>("IsFree")
                        .HasColumnType("bit");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Precio")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("PlanSuscripciones");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Descripcion = "Plan básico sin costo.",
                            DuracionEnDias = 0,
                            IsFree = false,
                            Nombre = "Básico",
                            Precio = 0m
                        },
                        new
                        {
                            Id = 2,
                            Descripcion = "Plan estándar con acceso a consultas.",
                            DuracionEnDias = 0,
                            IsFree = false,
                            Nombre = "Estándar",
                            Precio = 50m
                        },
                        new
                        {
                            Id = 3,
                            Descripcion = "Plan premium con acceso completo a servicios.",
                            DuracionEnDias = 0,
                            IsFree = false,
                            Nombre = "Premium",
                            Precio = 100m
                        });
                });

            modelBuilder.Entity("KIVO.Models.Producto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<int>("CentroMedicoId")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Precio")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("SKU")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CentroMedicoId");

                    b.ToTable("Productos");
                });

            modelBuilder.Entity("KIVO.Models.Receta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CitaId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime2");

                    b.Property<string>("Instrucciones")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MedicamentoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CitaId")
                        .IsUnique();

                    b.HasIndex("MedicamentoId");

                    b.ToTable("Recetas");
                });

            modelBuilder.Entity("KIVO.Models.RecetaMedicamento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Dosis")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Duracion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Frecuencia")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MedicamentoId")
                        .HasColumnType("int");

                    b.Property<int?>("RecetaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MedicamentoId");

                    b.HasIndex("RecetaId");

                    b.ToTable("RecetasMedicamentos");
                });

            modelBuilder.Entity("KIVO.Models.ResultadoLaboratorio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ArchivoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CitaId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FechaPrueba")
                        .HasColumnType("datetime2");

                    b.Property<string>("Observaciones")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TipoPrueba")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CitaId")
                        .IsUnique();

                    b.ToTable("ResultadosLaboratorios");
                });

            modelBuilder.Entity("KIVO.Models.SignosVitales", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CitaId")
                        .HasColumnType("int");

                    b.Property<double?>("Diastolica")
                        .HasColumnType("float");

                    b.Property<double?>("EdadCuerpo")
                        .HasColumnType("float");

                    b.Property<double?>("Estatura")
                        .HasColumnType("float");

                    b.Property<double?>("FrecuenciaCardiaca")
                        .HasColumnType("float");

                    b.Property<double?>("FrecuenciaRespiratoria")
                        .HasColumnType("float");

                    b.Property<double?>("Huesos")
                        .HasColumnType("float");

                    b.Property<double?>("MasaCorporal")
                        .HasColumnType("float");

                    b.Property<double?>("MasaMuscular")
                        .HasColumnType("float");

                    b.Property<double?>("Metabolismo")
                        .HasColumnType("float");

                    b.Property<double?>("PerimetroAbdominal")
                        .HasColumnType("float");

                    b.Property<double?>("PerimetroCefalico")
                        .HasColumnType("float");

                    b.Property<double?>("Peso")
                        .HasColumnType("float");

                    b.Property<double?>("PorcentajeAgua")
                        .HasColumnType("float");

                    b.Property<double?>("PorcentajeGrasaCorporal")
                        .HasColumnType("float");

                    b.Property<double?>("PorcentajeGrasaVisceral")
                        .HasColumnType("float");

                    b.Property<double?>("PorcentajeProteinas")
                        .HasColumnType("float");

                    b.Property<double?>("SaturacionOxigeno")
                        .HasColumnType("float");

                    b.Property<double?>("Sistolica")
                        .HasColumnType("float");

                    b.Property<double?>("Temperatura")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("CitaId")
                        .IsUnique();

                    b.ToTable("SignosVitales");
                });

            modelBuilder.Entity("KIVO.Models.Suscripcion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activa")
                        .HasColumnType("bit");

                    b.Property<int>("CentroMedicoId")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaFin")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaInicio")
                        .HasColumnType("datetime2");

                    b.Property<int>("PlanSuscripcionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CentroMedicoId");

                    b.HasIndex("PlanSuscripcionId");

                    b.ToTable("Suscripciones");
                });

            modelBuilder.Entity("KIVO.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("HaConfiguradoOrganizacion")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("MedicoId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Nombres")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("SelecionoPlan")
                        .HasColumnType("bit");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("VerificationCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("VerificationCodeExpiry")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("MedicoId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("KIVO.Models.AntecedentesFamiliaresPatologicos", b =>
                {
                    b.HasOne("KIVO.Models.Paciente", "Paciente")
                        .WithMany()
                        .HasForeignKey("PacienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Paciente");
                });

            modelBuilder.Entity("KIVO.Models.CargoPorConsulta", b =>
                {
                    b.HasOne("KIVO.Models.Cita", "Cita")
                        .WithMany()
                        .HasForeignKey("CitaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cita");
                });

            modelBuilder.Entity("KIVO.Models.CentroMedico", b =>
                {
                    b.HasOne("KIVO.Models.Cuidad", "Cuidad")
                        .WithMany("CentroMedicos")
                        .HasForeignKey("CuidadId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KIVO.Models.Departamento", "Departamento")
                        .WithMany("CentroMedicos")
                        .HasForeignKey("DepartamentoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Cuidad");

                    b.Navigation("Departamento");
                });

            modelBuilder.Entity("KIVO.Models.Cita", b =>
                {
                    b.HasOne("KIVO.Models.CentroMedico", "CentroMedico")
                        .WithMany("Citas")
                        .HasForeignKey("CentroMedicoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KIVO.Models.Medico", "Medico")
                        .WithMany("Citas")
                        .HasForeignKey("MedicoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KIVO.Models.Paciente", "Paciente")
                        .WithMany("Cita")
                        .HasForeignKey("PacienteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CentroMedico");

                    b.Navigation("Medico");

                    b.Navigation("Paciente");
                });

            modelBuilder.Entity("KIVO.Models.Cuidad", b =>
                {
                    b.HasOne("KIVO.Models.Departamento", "Departamento")
                        .WithMany("Ciudades")
                        .HasForeignKey("DepartamentoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Departamento");
                });

            modelBuilder.Entity("KIVO.Models.Diagnostico", b =>
                {
                    b.HasOne("KIVO.Models.Cita", "Cita")
                        .WithMany()
                        .HasForeignKey("CitaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cita");
                });

            modelBuilder.Entity("KIVO.Models.Dieta", b =>
                {
                    b.HasOne("KIVO.Models.Paciente", "Paciente")
                        .WithMany()
                        .HasForeignKey("PacienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Paciente");
                });

            modelBuilder.Entity("KIVO.Models.EnfermedadesHereditarias", b =>
                {
                    b.HasOne("KIVO.Models.Paciente", "Paciente")
                        .WithMany()
                        .HasForeignKey("PacienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Paciente");
                });

            modelBuilder.Entity("KIVO.Models.ExploracionTopografica", b =>
                {
                    b.HasOne("KIVO.Models.Cita", "Cita")
                        .WithOne("ExploracionTopografica")
                        .HasForeignKey("KIVO.Models.ExploracionTopografica", "CitaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cita");
                });

            modelBuilder.Entity("KIVO.Models.HistoriaObstetricaGinecologica", b =>
                {
                    b.HasOne("KIVO.Models.Paciente", "Paciente")
                        .WithMany()
                        .HasForeignKey("PacienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Paciente");
                });

            modelBuilder.Entity("KIVO.Models.HistoriaPostnatal", b =>
                {
                    b.HasOne("KIVO.Models.Paciente", "Paciente")
                        .WithMany()
                        .HasForeignKey("PacienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Paciente");
                });

            modelBuilder.Entity("KIVO.Models.HistoriaPsiquiatrica", b =>
                {
                    b.HasOne("KIVO.Models.Paciente", "Paciente")
                        .WithMany()
                        .HasForeignKey("PacienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Paciente");
                });

            modelBuilder.Entity("KIVO.Models.HorarioAtencion", b =>
                {
                    b.HasOne("KIVO.Models.CentroMedico", "CentroMedico")
                        .WithMany("HorarioAtencions")
                        .HasForeignKey("CentroMedicoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CentroMedico");
                });

            modelBuilder.Entity("KIVO.Models.InvitacionDoctor", b =>
                {
                    b.HasOne("KIVO.Models.CentroMedico", "centroMedico")
                        .WithMany("InvitacionDoctors")
                        .HasForeignKey("CentroMedicoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("centroMedico");
                });

            modelBuilder.Entity("KIVO.Models.Medico", b =>
                {
                    b.HasOne("KIVO.Models.CentroMedico", "CentroMedico")
                        .WithMany("Medicos")
                        .HasForeignKey("CentroMedicoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KIVO.Models.EspecialidadMedica", "EspecialidadMedico")
                        .WithMany("Medicos")
                        .HasForeignKey("EspecialidadMedicoId");

                    b.Navigation("CentroMedico");

                    b.Navigation("EspecialidadMedico");
                });

            modelBuilder.Entity("KIVO.Models.NotaDeEncuentro", b =>
                {
                    b.HasOne("KIVO.Models.Cita", "Cita")
                        .WithMany("NotaDeEncuentros")
                        .HasForeignKey("CitaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cita");
                });

            modelBuilder.Entity("KIVO.Models.Nutricion", b =>
                {
                    b.HasOne("KIVO.Models.Cita", "Cita")
                        .WithOne("Nutricion")
                        .HasForeignKey("KIVO.Models.Nutricion", "CitaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cita");
                });

            modelBuilder.Entity("KIVO.Models.Paciente", b =>
                {
                    b.HasOne("KIVO.Models.CentroMedico", "CentroMedico")
                        .WithMany("Pacientes")
                        .HasForeignKey("CentroMedicoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KIVO.Models.Cuidad", "Ciudad")
                        .WithMany("Pacientes")
                        .HasForeignKey("CiudadId");

                    b.HasOne("KIVO.Models.Departamento", "Departamento")
                        .WithMany("Pacientes")
                        .HasForeignKey("DepartamentoId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("KIVO.Models.User", "User")
                        .WithOne("Paciente")
                        .HasForeignKey("KIVO.Models.Paciente", "UserId");

                    b.Navigation("CentroMedico");

                    b.Navigation("Ciudad");

                    b.Navigation("Departamento");

                    b.Navigation("User");
                });

            modelBuilder.Entity("KIVO.Models.Producto", b =>
                {
                    b.HasOne("KIVO.Models.CentroMedico", "CentroMedico")
                        .WithMany("Productos")
                        .HasForeignKey("CentroMedicoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CentroMedico");
                });

            modelBuilder.Entity("KIVO.Models.Receta", b =>
                {
                    b.HasOne("KIVO.Models.Cita", "Cita")
                        .WithOne("Receta")
                        .HasForeignKey("KIVO.Models.Receta", "CitaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KIVO.Models.Medicamento", null)
                        .WithMany("Recetas")
                        .HasForeignKey("MedicamentoId");

                    b.Navigation("Cita");
                });

            modelBuilder.Entity("KIVO.Models.RecetaMedicamento", b =>
                {
                    b.HasOne("KIVO.Models.Medicamento", "Medicamento")
                        .WithMany()
                        .HasForeignKey("MedicamentoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KIVO.Models.Receta", "Receta")
                        .WithMany("RecetaMedicamentos")
                        .HasForeignKey("RecetaId");

                    b.Navigation("Medicamento");

                    b.Navigation("Receta");
                });

            modelBuilder.Entity("KIVO.Models.ResultadoLaboratorio", b =>
                {
                    b.HasOne("KIVO.Models.Cita", "Cita")
                        .WithOne("ResultadoLaboratorio")
                        .HasForeignKey("KIVO.Models.ResultadoLaboratorio", "CitaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cita");
                });

            modelBuilder.Entity("KIVO.Models.SignosVitales", b =>
                {
                    b.HasOne("KIVO.Models.Cita", "Cita")
                        .WithOne("SignosVitales")
                        .HasForeignKey("KIVO.Models.SignosVitales", "CitaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cita");
                });

            modelBuilder.Entity("KIVO.Models.Suscripcion", b =>
                {
                    b.HasOne("KIVO.Models.CentroMedico", "CentroMedico")
                        .WithMany("Suscripciones")
                        .HasForeignKey("CentroMedicoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KIVO.Models.PlanSuscripcion", "PlanSuscripcion")
                        .WithMany("Suscripciones")
                        .HasForeignKey("PlanSuscripcionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CentroMedico");

                    b.Navigation("PlanSuscripcion");
                });

            modelBuilder.Entity("KIVO.Models.User", b =>
                {
                    b.HasOne("KIVO.Models.Medico", "Medico")
                        .WithMany()
                        .HasForeignKey("MedicoId");

                    b.Navigation("Medico");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("KIVO.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("KIVO.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KIVO.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("KIVO.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KIVO.Models.CentroMedico", b =>
                {
                    b.Navigation("Citas");

                    b.Navigation("HorarioAtencions");

                    b.Navigation("InvitacionDoctors");

                    b.Navigation("Medicos");

                    b.Navigation("Pacientes");

                    b.Navigation("Productos");

                    b.Navigation("Suscripciones");
                });

            modelBuilder.Entity("KIVO.Models.Cita", b =>
                {
                    b.Navigation("ExploracionTopografica");

                    b.Navigation("NotaDeEncuentros");

                    b.Navigation("Nutricion");

                    b.Navigation("Receta");

                    b.Navigation("ResultadoLaboratorio");

                    b.Navigation("SignosVitales");
                });

            modelBuilder.Entity("KIVO.Models.Cuidad", b =>
                {
                    b.Navigation("CentroMedicos");

                    b.Navigation("Pacientes");
                });

            modelBuilder.Entity("KIVO.Models.Departamento", b =>
                {
                    b.Navigation("CentroMedicos");

                    b.Navigation("Ciudades");

                    b.Navigation("Pacientes");
                });

            modelBuilder.Entity("KIVO.Models.EspecialidadMedica", b =>
                {
                    b.Navigation("Medicos");
                });

            modelBuilder.Entity("KIVO.Models.Medicamento", b =>
                {
                    b.Navigation("Recetas");
                });

            modelBuilder.Entity("KIVO.Models.Medico", b =>
                {
                    b.Navigation("Citas");
                });

            modelBuilder.Entity("KIVO.Models.Paciente", b =>
                {
                    b.Navigation("Cita");
                });

            modelBuilder.Entity("KIVO.Models.PlanSuscripcion", b =>
                {
                    b.Navigation("Suscripciones");
                });

            modelBuilder.Entity("KIVO.Models.Receta", b =>
                {
                    b.Navigation("RecetaMedicamentos");
                });

            modelBuilder.Entity("KIVO.Models.User", b =>
                {
                    b.Navigation("Paciente");
                });
#pragma warning restore 612, 618
        }
    }
}
